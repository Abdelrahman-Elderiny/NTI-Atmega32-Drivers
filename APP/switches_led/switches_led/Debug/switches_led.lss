
switches_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b3  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000541  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055a  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  64:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <dio_vidConfigChannel>:
/*					          mask  -> data mask                         */
/*					 return : void		 						         */
/*************************************************************************/

void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask )
{
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	01 f1       	breq	.+64     	; 0xb0 <dio_vidConfigChannel+0x44>
  70:	30 f0       	brcs	.+12     	; 0x7e <dio_vidConfigChannel+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <dio_vidConfigChannel+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <dio_vidConfigChannel+0x10>
  7a:	50 c0       	rjmp	.+160    	; 0x11c <dio_vidConfigChannel+0xb0>
  7c:	08 95       	ret
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <dio_vidConfigChannel+0x2c>
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <dio_vidConfigChannel+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <dio_vidConfigChannel+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <dio_vidConfigChannel+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <dio_vidConfigChannel+0x34>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <dio_vidConfigChannel+0x62>
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	20 81       	ld	r18, Z
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <dio_vidConfigChannel+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <dio_vidConfigChannel+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <dio_vidConfigChannel+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <dio_vidConfigChannel+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <dio_vidConfigChannel+0x98>
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_vidConfigChannel+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_vidConfigChannel+0x8a>
  fe:	82 2b       	or	r24, r18
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <dio_vidConfigChannel+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <dio_vidConfigChannel+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	84 bb       	out	0x14, r24	; 20
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <dio_vidConfigChannel+0xca>
 120:	21 b3       	in	r18, 0x11	; 17
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <dio_vidConfigChannel+0xc0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <dio_vidConfigChannel+0xbc>
 130:	82 2b       	or	r24, r18
 132:	81 bb       	out	0x11, r24	; 17
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <dio_vidConfigChannel+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <dio_vidConfigChannel+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <dio_vidWriteChannel>:
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	01 f1       	breq	.+64     	; 0x192 <dio_vidWriteChannel+0x44>
 152:	30 f0       	brcs	.+12     	; 0x160 <dio_vidWriteChannel+0x12>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	b1 f1       	breq	.+108    	; 0x1c4 <dio_vidWriteChannel+0x76>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	09 f4       	brne	.+2      	; 0x15e <dio_vidWriteChannel+0x10>
 15c:	4c c0       	rjmp	.+152    	; 0x1f6 <dio_vidWriteChannel+0xa8>
 15e:	08 95       	ret
 160:	41 11       	cpse	r20, r1
 162:	0c c0       	rjmp	.+24     	; 0x17c <dio_vidWriteChannel+0x2e>
 164:	2b b3       	in	r18, 0x1b	; 27
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <dio_vidWriteChannel+0x22>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <dio_vidWriteChannel+0x1e>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	8b bb       	out	0x1b, r24	; 27
 17a:	08 95       	ret
 17c:	2b b3       	in	r18, 0x1b	; 27
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <dio_vidWriteChannel+0x3a>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <dio_vidWriteChannel+0x36>
 18c:	82 2b       	or	r24, r18
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	08 95       	ret
 192:	41 11       	cpse	r20, r1
 194:	0c c0       	rjmp	.+24     	; 0x1ae <dio_vidWriteChannel+0x60>
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <dio_vidWriteChannel+0x54>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <dio_vidWriteChannel+0x50>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	08 95       	ret
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <dio_vidWriteChannel+0x6c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <dio_vidWriteChannel+0x68>
 1be:	82 2b       	or	r24, r18
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
 1c4:	41 11       	cpse	r20, r1
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <dio_vidWriteChannel+0x92>
 1c8:	25 b3       	in	r18, 0x15	; 21
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidWriteChannel+0x86>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidWriteChannel+0x82>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <dio_vidWriteChannel+0x9e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <dio_vidWriteChannel+0x9a>
 1f0:	82 2b       	or	r24, r18
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	08 95       	ret
 1f6:	41 11       	cpse	r20, r1
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <dio_vidWriteChannel+0xc4>
 1fa:	22 b3       	in	r18, 0x12	; 18
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <dio_vidWriteChannel+0xb8>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <dio_vidWriteChannel+0xb4>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	82 bb       	out	0x12, r24	; 18
 210:	08 95       	ret
 212:	22 b3       	in	r18, 0x12	; 18
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <dio_vidWriteChannel+0xd0>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <dio_vidWriteChannel+0xcc>
 222:	82 2b       	or	r24, r18
 224:	82 bb       	out	0x12, r24	; 18
 226:	08 95       	ret

00000228 <dio_vidFlipChannel>:
/*					 return : void		 						         */
/*************************************************************************/

void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	89 f0       	breq	.+34     	; 0x24e <dio_vidFlipChannel+0x26>
 22c:	28 f0       	brcs	.+10     	; 0x238 <dio_vidFlipChannel+0x10>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	c9 f0       	breq	.+50     	; 0x264 <dio_vidFlipChannel+0x3c>
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	11 f1       	breq	.+68     	; 0x27a <dio_vidFlipChannel+0x52>
 236:	08 95       	ret
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 238:	2b b3       	in	r18, 0x1b	; 27
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <dio_vidFlipChannel+0x1c>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <dio_vidFlipChannel+0x18>
 248:	82 27       	eor	r24, r18
 24a:	8b bb       	out	0x1b, r24	; 27
		break;
 24c:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <dio_vidFlipChannel+0x32>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <dio_vidFlipChannel+0x2e>
 25e:	82 27       	eor	r24, r18
 260:	88 bb       	out	0x18, r24	; 24
		break;
 262:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 264:	25 b3       	in	r18, 0x15	; 21
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <dio_vidFlipChannel+0x48>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <dio_vidFlipChannel+0x44>
 274:	82 27       	eor	r24, r18
 276:	85 bb       	out	0x15, r24	; 21
		break;
 278:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 27a:	22 b3       	in	r18, 0x12	; 18
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <dio_vidFlipChannel+0x5e>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <dio_vidFlipChannel+0x5a>
 28a:	82 27       	eor	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret

00000290 <dio_dioLevelReadChannel>:
/*************************************************************************/

dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	79 f0       	breq	.+30     	; 0x2b2 <dio_dioLevelReadChannel+0x22>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <dio_dioLevelReadChannel+0x10>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	a9 f0       	breq	.+42     	; 0x2c4 <dio_dioLevelReadChannel+0x34>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	e1 f0       	breq	.+56     	; 0x2d6 <dio_dioLevelReadChannel+0x46>
 29e:	24 c0       	rjmp	.+72     	; 0x2e8 <dio_dioLevelReadChannel+0x58>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_dioLevelReadChannel+0x1a>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_dioLevelReadChannel+0x16>
 2ae:	81 70       	andi	r24, 0x01	; 1
		break;
 2b0:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 2b2:	86 b3       	in	r24, 0x16	; 22
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <dio_dioLevelReadChannel+0x2c>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <dio_dioLevelReadChannel+0x28>
 2c0:	81 70       	andi	r24, 0x01	; 1
		break;
 2c2:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 2c4:	83 b3       	in	r24, 0x13	; 19
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <dio_dioLevelReadChannel+0x3e>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <dio_dioLevelReadChannel+0x3a>
 2d2:	81 70       	andi	r24, 0x01	; 1
		break;
 2d4:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 2d6:	80 b3       	in	r24, 0x10	; 16
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <dio_dioLevelReadChannel+0x50>
 2dc:	95 95       	asr	r25
 2de:	87 95       	ror	r24
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <dio_dioLevelReadChannel+0x4c>
 2e4:	81 70       	andi	r24, 0x01	; 1
		break;
 2e6:	08 95       	ret
/*					 return : loc_pinRead   -> IO channel level 		 */						         
/*************************************************************************/

dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 2ea:	08 95       	ret

000002ec <led_init>:
		break;
		
		case LED_YELLOW:
		
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	67 e0       	ldi	r22, 0x07	; 7
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	65 e0       	ldi	r22, 0x05	; 5
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	66 e0       	ldi	r22, 0x06	; 6
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 314:	08 95       	ret

00000316 <led_toggle>:
/*					Return : void		 					       */
/******************************************************************/

void led_toggle(led_id ledId)
{
	switch(ledId)
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	59 f0       	breq	.+22     	; 0x330 <led_toggle+0x1a>
 31a:	28 f0       	brcs	.+10     	; 0x326 <led_toggle+0x10>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	69 f0       	breq	.+26     	; 0x33a <led_toggle+0x24>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	81 f0       	breq	.+32     	; 0x344 <led_toggle+0x2e>
 324:	08 95       	ret
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);
 326:	67 e0       	ldi	r22, 0x07	; 7
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 14 01 	call	0x228	; 0x228 <dio_vidFlipChannel>
			
		break;
 32e:	08 95       	ret
		
		case LED_GREEN:
		
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 14 01 	call	0x228	; 0x228 <dio_vidFlipChannel>
			
		break;
 338:	08 95       	ret
		
		case LED_BLUE:
		
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
 33a:	65 e0       	ldi	r22, 0x05	; 5
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 14 01 	call	0x228	; 0x228 <dio_vidFlipChannel>

		break;
 342:	08 95       	ret
		
		case LED_YELLOW:
		
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
 344:	66 e0       	ldi	r22, 0x06	; 6
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 14 01 	call	0x228	; 0x228 <dio_vidFlipChannel>
 34c:	08 95       	ret

0000034e <main>:
#include "SWITCHES_INT.h"


int main(void)
{
    led_init();
 34e:	0e 94 76 01 	call	0x2ec	; 0x2ec <led_init>
	switch_vidInit();
 352:	0e 94 b4 01 	call	0x368	; 0x368 <switch_vidInit>
	u8 x = 0 ;
	
	
    while (1) 
    {
		x = switch_GetStatus(PB_1);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 dd 01 	call	0x3ba	; 0x3ba <switch_GetStatus>
		if (x == PRESSED)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	d9 f7       	brne	.-10     	; 0x356 <main+0x8>
		{
			led_toggle(LED_RED);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 8b 01 	call	0x316	; 0x316 <led_toggle>
 366:	f7 cf       	rjmp	.-18     	; 0x356 <main+0x8>

00000368 <switch_vidInit>:

void switch_vidInit(void)
{
	/********* Config The channels as INPUT **********/
	
	dio_vidConfigChannel(PB1_PORT,PB1_PIN,INPUT);	
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	67 e0       	ldi	r22, 0x07	; 7
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(PB2_PORT,PB2_PIN,INPUT);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	66 e0       	ldi	r22, 0x06	; 6
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(PB3_PORT,PB3_PIN,INPUT);
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	65 e0       	ldi	r22, 0x05	; 5
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(PB4_PORT,PB4_PIN,INPUT);
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
	
	/***** Make a Internaly Pull up Resistor ******/
	
	dio_vidWriteChannel (PB1_PORT,PB1_PIN,STD_HIGH);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	67 e0       	ldi	r22, 0x07	; 7
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	0e 94 a7 00 	call	0x14e	; 0x14e <dio_vidWriteChannel>
	dio_vidWriteChannel (PB2_PORT,PB2_PIN,STD_HIGH);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	66 e0       	ldi	r22, 0x06	; 6
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 a7 00 	call	0x14e	; 0x14e <dio_vidWriteChannel>
	dio_vidWriteChannel (PB3_PORT,PB3_PIN,STD_HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	65 e0       	ldi	r22, 0x05	; 5
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 a7 00 	call	0x14e	; 0x14e <dio_vidWriteChannel>
	dio_vidWriteChannel (PB4_PORT,PB4_PIN,STD_HIGH);
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 a7 00 	call	0x14e	; 0x14e <dio_vidWriteChannel>
 3b8:	08 95       	ret

000003ba <switch_GetStatus>:

u8 switch_GetStatus(switch_id_t button)
{
	state status = RELEASED ;

	switch (button)
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	89 f0       	breq	.+34     	; 0x3e0 <switch_GetStatus+0x26>
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <switch_GetStatus+0xc>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	31 f0       	breq	.+12     	; 0x3d0 <switch_GetStatus+0x16>
 3c4:	25 c0       	rjmp	.+74     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	99 f0       	breq	.+38     	; 0x3f0 <switch_GetStatus+0x36>
 3ca:	84 30       	cpi	r24, 0x04	; 4
 3cc:	c9 f0       	breq	.+50     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ce:	20 c0       	rjmp	.+64     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		else 
		{
			status = RELEASED ;
		}
		#elif (PB1_CONNECTION == PULL_UP)
		if (dio_dioLevelReadChannel(PB1_PORT,PB1_PIN) == STD_LOW)
 3d0:	67 e0       	ldi	r22, 0x07	; 7
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0e 94 48 01 	call	0x290	; 0x290 <dio_dioLevelReadChannel>
 3d8:	81 11       	cpse	r24, r1
 3da:	1c c0       	rjmp	.+56     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			status = PRESSED ;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	08 95       	ret
		else
		{
			status = RELEASED ;
		}
		#elif (PB2_CONNECTION == PULL_UP)
		if (dio_dioLevelReadChannel(PB2_PORT,PB2_PIN) == STD_LOW)
 3e0:	66 e0       	ldi	r22, 0x06	; 6
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 48 01 	call	0x290	; 0x290 <dio_dioLevelReadChannel>
 3e8:	81 11       	cpse	r24, r1
 3ea:	16 c0       	rjmp	.+44     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			status = PRESSED ;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
		else
		{
			status =  RELEASED ;
		}
		#elif (PB3_CONNECTION == PULL_UP)
		if (dio_dioLevelReadChannel(PB3_PORT,PB3_PIN) == STD_LOW)
 3f0:	65 e0       	ldi	r22, 0x05	; 5
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 48 01 	call	0x290	; 0x290 <dio_dioLevelReadChannel>
 3f8:	81 11       	cpse	r24, r1
 3fa:	10 c0       	rjmp	.+32     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			status=  PRESSED ;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
		else
		{
			status = RELEASED ;
		}
		#elif (PB4_CONNECTION == PULL_UP)
		if (dio_dioLevelReadChannel(PB4_PORT,PB4_PIN) == STD_LOW)
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 48 01 	call	0x290	; 0x290 <dio_dioLevelReadChannel>
 408:	81 11       	cpse	r24, r1
 40a:	0a c0       	rjmp	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			status = PRESSED ;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
/*					Return : state of button 				       */
/******************************************************************/

u8 switch_GetStatus(switch_id_t button)
{
	state status = RELEASED ;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
		{
			status = PRESSED ;
		}
		else
		{
			status = RELEASED ;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
		{
			status = PRESSED ;
		}
		else
		{
			status = RELEASED ;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
		{
			status=  PRESSED ;
		}
		else
		{
			status = RELEASED ;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
		{
			status = PRESSED ;
		}
		else
		{
			status = RELEASED ;
 420:	80 e0       	ldi	r24, 0x00	; 0
		}
		#endif
		break;
	}
	return status ;
}
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
