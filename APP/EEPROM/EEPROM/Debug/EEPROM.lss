
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3d  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000429  00000000  00000000  000014b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b7  00000000  00000000  00001e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 29 01 	call	0x252	; 0x252 <main>
  64:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <dio_vidConfigChannel>:
/*					 return : void		 						   */
/*******************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	01 f1       	breq	.+64     	; 0xb0 <dio_vidConfigChannel+0x44>
  70:	30 f0       	brcs	.+12     	; 0x7e <dio_vidConfigChannel+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <dio_vidConfigChannel+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <dio_vidConfigChannel+0x10>
  7a:	50 c0       	rjmp	.+160    	; 0x11c <dio_vidConfigChannel+0xb0>
  7c:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <dio_vidConfigChannel+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <dio_vidConfigChannel+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <dio_vidConfigChannel+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <dio_vidConfigChannel+0x34>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <dio_vidConfigChannel+0x62>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	20 81       	ld	r18, Z
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <dio_vidConfigChannel+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <dio_vidConfigChannel+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <dio_vidConfigChannel+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <dio_vidConfigChannel+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <dio_vidConfigChannel+0x98>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_vidConfigChannel+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_vidConfigChannel+0x8a>
  fe:	82 2b       	or	r24, r18
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <dio_vidConfigChannel+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <dio_vidConfigChannel+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	84 bb       	out	0x14, r24	; 20
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <dio_vidConfigChannel+0xca>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 120:	21 b3       	in	r18, 0x11	; 17
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <dio_vidConfigChannel+0xc0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <dio_vidConfigChannel+0xbc>
 130:	82 2b       	or	r24, r18
 132:	81 bb       	out	0x11, r24	; 17
 134:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <dio_vidConfigChannel+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <dio_vidConfigChannel+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <dio_vidWriteChannel>:
/*					 return : void		 						   */
/*******************************************************************/

void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	01 f1       	breq	.+64     	; 0x192 <dio_vidWriteChannel+0x44>
 152:	30 f0       	brcs	.+12     	; 0x160 <dio_vidWriteChannel+0x12>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	b1 f1       	breq	.+108    	; 0x1c4 <dio_vidWriteChannel+0x76>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	09 f4       	brne	.+2      	; 0x15e <dio_vidWriteChannel+0x10>
 15c:	4c c0       	rjmp	.+152    	; 0x1f6 <dio_vidWriteChannel+0xa8>
 15e:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 160:	41 11       	cpse	r20, r1
 162:	0c c0       	rjmp	.+24     	; 0x17c <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 164:	2b b3       	in	r18, 0x1b	; 27
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <dio_vidWriteChannel+0x22>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <dio_vidWriteChannel+0x1e>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	8b bb       	out	0x1b, r24	; 27
 17a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 17c:	2b b3       	in	r18, 0x1b	; 27
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <dio_vidWriteChannel+0x3a>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <dio_vidWriteChannel+0x36>
 18c:	82 2b       	or	r24, r18
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 192:	41 11       	cpse	r20, r1
 194:	0c c0       	rjmp	.+24     	; 0x1ae <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <dio_vidWriteChannel+0x54>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <dio_vidWriteChannel+0x50>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <dio_vidWriteChannel+0x6c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <dio_vidWriteChannel+0x68>
 1be:	82 2b       	or	r24, r18
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1c4:	41 11       	cpse	r20, r1
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 1c8:	25 b3       	in	r18, 0x15	; 21
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidWriteChannel+0x86>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidWriteChannel+0x82>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <dio_vidWriteChannel+0x9e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <dio_vidWriteChannel+0x9a>
 1f0:	82 2b       	or	r24, r18
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 1f6:	41 11       	cpse	r20, r1
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 1fa:	22 b3       	in	r18, 0x12	; 18
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <dio_vidWriteChannel+0xb8>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <dio_vidWriteChannel+0xb4>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	82 bb       	out	0x12, r24	; 18
 210:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 212:	22 b3       	in	r18, 0x12	; 18
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <dio_vidWriteChannel+0xd0>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <dio_vidWriteChannel+0xcc>
 222:	82 2b       	or	r24, r18
 224:	82 bb       	out	0x12, r24	; 18
 226:	08 95       	ret

00000228 <EEPROM_vidWrite>:
/****************************************************************/

void EEPROM_vidWrite(u16 address , u8 data )
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
 228:	e1 99       	sbic	0x1c, 1	; 28
 22a:	fe cf       	rjmp	.-4      	; 0x228 <EEPROM_vidWrite>
	;
	/* Set up address and data registers */
	EEARL = address;
 22c:	9f bb       	out	0x1f, r25	; 31
 22e:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
 230:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
 232:	8c b3       	in	r24, 0x1c	; 28
 234:	84 60       	ori	r24, 0x04	; 4
 236:	8c bb       	out	0x1c, r24	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
 238:	8c b3       	in	r24, 0x1c	; 28
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	8c bb       	out	0x1c, r24	; 28
 23e:	08 95       	ret

00000240 <EEPROM_Read>:
/****************************************************************/

u8 EEPROM_Read(u16 address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
 240:	e1 99       	sbic	0x1c, 1	; 28
 242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_Read>
	;
	/* Set up address register */
	EEARL = address;
 244:	9f bb       	out	0x1f, r25	; 31
 246:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 248:	8c b3       	in	r24, 0x1c	; 28
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
 24e:	8d b3       	in	r24, 0x1d	; 29
 250:	08 95       	ret

00000252 <main>:
#include "EEPROM_INT.h"


int main(void)
{
    EEPROM_vidWrite(0X1010,10);
 252:	6a e0       	ldi	r22, 0x0A	; 10
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	90 e1       	ldi	r25, 0x10	; 16
 258:	0e 94 14 01 	call	0x228	; 0x228 <EEPROM_vidWrite>
	u8 x = EEPROM_Read (0X1010);
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	90 e1       	ldi	r25, 0x10	; 16
 260:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_Read>
 264:	c8 2f       	mov	r28, r24
    while (1) 
    {
		if (x == 10)
 266:	ca 30       	cpi	r28, 0x0A	; 10
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x14>
		{
			dio_vidConfigChannel(DIO_PORTA,DIO_PIN0,OUTPUT);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
			dio_vidWriteChannel(DIO_PORTA,DIO_PIN0,STD_HIGH);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 a7 00 	call	0x14e	; 0x14e <dio_vidWriteChannel>
 27e:	f3 cf       	rjmp	.-26     	; 0x266 <main+0x14>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
