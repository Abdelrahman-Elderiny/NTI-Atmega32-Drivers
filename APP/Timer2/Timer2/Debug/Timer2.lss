
Timer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000382  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca6  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079f  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000641  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00001ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060d  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ea  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002d1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_4>
  14:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 39 01 	call	0x272	; 0x272 <main>
  74:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	01 f1       	breq	.+64     	; 0xc0 <dio_vidConfigChannel+0x44>
  80:	30 f0       	brcs	.+12     	; 0x8e <dio_vidConfigChannel+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	d1 f1       	breq	.+116    	; 0xfa <dio_vidConfigChannel+0x7e>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <dio_vidConfigChannel+0x10>
  8a:	50 c0       	rjmp	.+160    	; 0x12c <dio_vidConfigChannel+0xb0>
  8c:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	59 f4       	brne	.+22     	; 0xa8 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <dio_vidConfigChannel+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <dio_vidConfigChannel+0x1e>
  a2:	82 2b       	or	r24, r18
  a4:	8a bb       	out	0x1a, r24	; 26
  a6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dio_vidConfigChannel+0x38>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dio_vidConfigChannel+0x34>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	69 f4       	brne	.+26     	; 0xde <dio_vidConfigChannel+0x62>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	20 81       	ld	r18, Z
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x58>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x54>
  d8:	82 2b       	or	r24, r18
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  de:	e0 e6       	ldi	r30, 0x60	; 96
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	20 81       	ld	r18, Z
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <dio_vidConfigChannel+0x72>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <dio_vidConfigChannel+0x6e>
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	59 f4       	brne	.+22     	; 0x114 <dio_vidConfigChannel+0x98>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  fe:	24 b3       	in	r18, 0x14	; 20
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <dio_vidConfigChannel+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <dio_vidConfigChannel+0x8a>
 10e:	82 2b       	or	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 114:	24 b3       	in	r18, 0x14	; 20
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <dio_vidConfigChannel+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <dio_vidConfigChannel+0xa0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	84 bb       	out	0x14, r24	; 20
 12a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	59 f4       	brne	.+22     	; 0x146 <dio_vidConfigChannel+0xca>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 130:	21 b3       	in	r18, 0x11	; 17
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <dio_vidConfigChannel+0xc0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <dio_vidConfigChannel+0xbc>
 140:	82 2b       	or	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <dio_vidConfigChannel+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <dio_vidConfigChannel+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	01 f1       	breq	.+64     	; 0x1a2 <dio_vidWriteChannel+0x44>
 162:	30 f0       	brcs	.+12     	; 0x170 <dio_vidWriteChannel+0x12>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	b1 f1       	breq	.+108    	; 0x1d4 <dio_vidWriteChannel+0x76>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	09 f4       	brne	.+2      	; 0x16e <dio_vidWriteChannel+0x10>
 16c:	4c c0       	rjmp	.+152    	; 0x206 <dio_vidWriteChannel+0xa8>
 16e:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 170:	41 11       	cpse	r20, r1
 172:	0c c0       	rjmp	.+24     	; 0x18c <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 174:	2b b3       	in	r18, 0x1b	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <dio_vidWriteChannel+0x22>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <dio_vidWriteChannel+0x1e>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <dio_vidWriteChannel+0x3a>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <dio_vidWriteChannel+0x36>
 19c:	82 2b       	or	r24, r18
 19e:	8b bb       	out	0x1b, r24	; 27
 1a0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 1a2:	41 11       	cpse	r20, r1
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <dio_vidWriteChannel+0x54>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <dio_vidWriteChannel+0x50>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <dio_vidWriteChannel+0x6c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <dio_vidWriteChannel+0x68>
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1d4:	41 11       	cpse	r20, r1
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <dio_vidWriteChannel+0x86>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <dio_vidWriteChannel+0x82>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	85 bb       	out	0x15, r24	; 21
 1ee:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dio_vidWriteChannel+0x9e>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <dio_vidWriteChannel+0x9a>
 200:	82 2b       	or	r24, r18
 202:	85 bb       	out	0x15, r24	; 21
 204:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 206:	41 11       	cpse	r20, r1
 208:	0c c0       	rjmp	.+24     	; 0x222 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <dio_vidWriteChannel+0xb8>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <dio_vidWriteChannel+0xb4>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	82 bb       	out	0x12, r24	; 18
 220:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 222:	22 b3       	in	r18, 0x12	; 18
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <dio_vidWriteChannel+0xd0>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <dio_vidWriteChannel+0xcc>
 232:	82 2b       	or	r24, r18
 234:	82 bb       	out	0x12, r24	; 18
 236:	08 95       	ret

00000238 <GIE_vidEnable>:
/*					 return : void		 						*/
/****************************************************************/

void GIE_vidEnable (void)
{
	SET_BIT (SREG , GIE_BIT);
 238:	8f b7       	in	r24, 0x3f	; 63
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	8f bf       	out	0x3f, r24	; 63
 23e:	08 95       	ret

00000240 <TASK>:
#include "GIE_INT.h"
#include <util/delay.h>

void TASK ()
{
	dio_vidConfigChannel(DIO_PORTA,DIO_PIN0,OUTPUT);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
	dio_vidWriteChannel(DIO_PORTA,DIO_PIN0,STD_HIGH);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 af 00 	call	0x15e	; 0x15e <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2f e9       	ldi	r18, 0x9F	; 159
 256:	86 e8       	ldi	r24, 0x86	; 134
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <TASK+0x1a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <TASK+0x24>
 264:	00 00       	nop
	_delay_ms(500);
	dio_vidWriteChannel(DIO_PORTA,DIO_PIN0,STD_LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 af 00 	call	0x15e	; 0x15e <dio_vidWriteChannel>
 270:	08 95       	ret

00000272 <main>:
}

int main(void)
{
	TIMER2_void_SetOVCallBack (TASK);
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <TIMER2_void_SetOVCallBack>
	TIMER2_void_Init();
 27a:	0e 94 44 01 	call	0x288	; 0x288 <TIMER2_void_Init>
	TIMER2_void_EnableOVInt ();
 27e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TIMER2_void_EnableOVInt>
	
	GIE_vidEnable();
 282:	0e 94 1c 01 	call	0x238	; 0x238 <GIE_vidEnable>
 286:	ff cf       	rjmp	.-2      	; 0x286 <main+0x14>

00000288 <TIMER2_void_Init>:

void (*TIMER2_CTC_CallBack) (void) ;

void TIMER2_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER2_CTC_CallBack = Copy_ptr ;
 288:	85 b5       	in	r24, 0x25	; 37
 28a:	8f 7b       	andi	r24, 0xBF	; 191
 28c:	85 bd       	out	0x25, r24	; 37
 28e:	85 b5       	in	r24, 0x25	; 37
 290:	87 7f       	andi	r24, 0xF7	; 247
 292:	85 bd       	out	0x25, r24	; 37
 294:	85 b5       	in	r24, 0x25	; 37
 296:	81 60       	ori	r24, 0x01	; 1
 298:	85 bd       	out	0x25, r24	; 37
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	8d 7f       	andi	r24, 0xFD	; 253
 29e:	85 bd       	out	0x25, r24	; 37
 2a0:	85 b5       	in	r24, 0x25	; 37
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	85 bd       	out	0x25, r24	; 37
 2a6:	85 b5       	in	r24, 0x25	; 37
 2a8:	8f 7e       	andi	r24, 0xEF	; 239
 2aa:	85 bd       	out	0x25, r24	; 37
 2ac:	85 b5       	in	r24, 0x25	; 37
 2ae:	8f 7d       	andi	r24, 0xDF	; 223
 2b0:	85 bd       	out	0x25, r24	; 37
 2b2:	89 b7       	in	r24, 0x39	; 57
 2b4:	8f 7b       	andi	r24, 0xBF	; 191
 2b6:	89 bf       	out	0x39, r24	; 57
 2b8:	89 b7       	in	r24, 0x39	; 57
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	89 bf       	out	0x39, r24	; 57
 2be:	88 b7       	in	r24, 0x38	; 56
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	88 bf       	out	0x38, r24	; 56
 2c4:	88 b7       	in	r24, 0x38	; 56
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	88 bf       	out	0x38, r24	; 56
 2ca:	14 bc       	out	0x24, r1	; 36
 2cc:	13 bc       	out	0x23, r1	; 35
 2ce:	08 95       	ret

000002d0 <TIMER2_void_EnableOVInt>:
 2d0:	89 b7       	in	r24, 0x39	; 57
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	89 bf       	out	0x39, r24	; 57
 2d6:	08 95       	ret

000002d8 <TIMER2_void_SetOVCallBack>:
 2d8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <TIMER2_OV_CallBack+0x1>
 2dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <TIMER2_OV_CallBack>
 2e0:	08 95       	ret

000002e2 <__vector_5>:
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
 304:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER2_OV_CallBack>
 308:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER2_OV_CallBack+0x1>
 30c:	09 95       	icall
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_4>:
	
}
void __vector_4(void) __attribute__((signal , used));
void __vector_4(void)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	
	TIMER2_CTC_CallBack();
 352:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 356:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 35a:	09 95       	icall
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
