
Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e39  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a8  00000000  00000000  000014dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075d  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c4  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071b  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_6>
  1c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_7>
  20:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_8>
  24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  74:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dio_vidConfigChannel>:
/*					 return : void		 						   */
/*******************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	01 f1       	breq	.+64     	; 0xc0 <dio_vidConfigChannel+0x44>
  80:	30 f0       	brcs	.+12     	; 0x8e <dio_vidConfigChannel+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	d1 f1       	breq	.+116    	; 0xfa <dio_vidConfigChannel+0x7e>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <dio_vidConfigChannel+0x10>
  8a:	50 c0       	rjmp	.+160    	; 0x12c <dio_vidConfigChannel+0xb0>
  8c:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	59 f4       	brne	.+22     	; 0xa8 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <dio_vidConfigChannel+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <dio_vidConfigChannel+0x1e>
  a2:	82 2b       	or	r24, r18
  a4:	8a bb       	out	0x1a, r24	; 26
  a6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dio_vidConfigChannel+0x38>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dio_vidConfigChannel+0x34>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	69 f4       	brne	.+26     	; 0xde <dio_vidConfigChannel+0x62>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	20 81       	ld	r18, Z
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x58>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x54>
  d8:	82 2b       	or	r24, r18
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  de:	e0 e6       	ldi	r30, 0x60	; 96
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	20 81       	ld	r18, Z
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <dio_vidConfigChannel+0x72>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <dio_vidConfigChannel+0x6e>
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	59 f4       	brne	.+22     	; 0x114 <dio_vidConfigChannel+0x98>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  fe:	24 b3       	in	r18, 0x14	; 20
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <dio_vidConfigChannel+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <dio_vidConfigChannel+0x8a>
 10e:	82 2b       	or	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 114:	24 b3       	in	r18, 0x14	; 20
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <dio_vidConfigChannel+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <dio_vidConfigChannel+0xa0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	84 bb       	out	0x14, r24	; 20
 12a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	59 f4       	brne	.+22     	; 0x146 <dio_vidConfigChannel+0xca>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 130:	21 b3       	in	r18, 0x11	; 17
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <dio_vidConfigChannel+0xc0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <dio_vidConfigChannel+0xbc>
 140:	82 2b       	or	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <dio_vidConfigChannel+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <dio_vidConfigChannel+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <dio_vidWriteChannel>:
/*					 return : void		 						   */
/*******************************************************************/

void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	01 f1       	breq	.+64     	; 0x1a2 <dio_vidWriteChannel+0x44>
 162:	30 f0       	brcs	.+12     	; 0x170 <dio_vidWriteChannel+0x12>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	b1 f1       	breq	.+108    	; 0x1d4 <dio_vidWriteChannel+0x76>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	09 f4       	brne	.+2      	; 0x16e <dio_vidWriteChannel+0x10>
 16c:	4c c0       	rjmp	.+152    	; 0x206 <dio_vidWriteChannel+0xa8>
 16e:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 170:	41 11       	cpse	r20, r1
 172:	0c c0       	rjmp	.+24     	; 0x18c <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 174:	2b b3       	in	r18, 0x1b	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <dio_vidWriteChannel+0x22>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <dio_vidWriteChannel+0x1e>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <dio_vidWriteChannel+0x3a>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <dio_vidWriteChannel+0x36>
 19c:	82 2b       	or	r24, r18
 19e:	8b bb       	out	0x1b, r24	; 27
 1a0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 1a2:	41 11       	cpse	r20, r1
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <dio_vidWriteChannel+0x54>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <dio_vidWriteChannel+0x50>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <dio_vidWriteChannel+0x6c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <dio_vidWriteChannel+0x68>
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1d4:	41 11       	cpse	r20, r1
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <dio_vidWriteChannel+0x86>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <dio_vidWriteChannel+0x82>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	85 bb       	out	0x15, r24	; 21
 1ee:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dio_vidWriteChannel+0x9e>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <dio_vidWriteChannel+0x9a>
 200:	82 2b       	or	r24, r18
 202:	85 bb       	out	0x15, r24	; 21
 204:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 206:	41 11       	cpse	r20, r1
 208:	0c c0       	rjmp	.+24     	; 0x222 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <dio_vidWriteChannel+0xb8>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <dio_vidWriteChannel+0xb4>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	82 bb       	out	0x12, r24	; 18
 220:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 222:	22 b3       	in	r18, 0x12	; 18
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <dio_vidWriteChannel+0xd0>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <dio_vidWriteChannel+0xcc>
 232:	82 2b       	or	r24, r18
 234:	82 bb       	out	0x12, r24	; 18
 236:	08 95       	ret

00000238 <GIE_vidEnable>:
/*					 return : void		 						*/
/****************************************************************/

void GIE_vidEnable (void)
{
	SET_BIT (SREG , GIE_BIT);
 238:	8f b7       	in	r24, 0x3f	; 63
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	8f bf       	out	0x3f, r24	; 63
 23e:	08 95       	ret

00000240 <task>:
#include "TIMER1_int.h"
#include "GIE_INT.h"
#include <util/delay.h>
void task ()
{
	dio_vidConfigChannel(DIO_PORTA,DIO_PIN0,OUTPUT);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,DIO_PIN1,OUTPUT);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
	dio_vidWriteChannel(DIO_PORTA,DIO_PIN0,STD_HIGH);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 af 00 	call	0x15e	; 0x15e <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f e7       	ldi	r18, 0x7F	; 127
 260:	84 e8       	ldi	r24, 0x84	; 132
 262:	9e e1       	ldi	r25, 0x1E	; 30
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <task+0x24>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <task+0x2e>
 26e:	00 00       	nop
	_delay_ms(10000);
	dio_vidWriteChannel(DIO_PORTA,DIO_PIN0,STD_LOW);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 af 00 	call	0x15e	; 0x15e <dio_vidWriteChannel>
	dio_vidWriteChannel(DIO_PORTA,DIO_PIN1,STD_HIGH);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 af 00 	call	0x15e	; 0x15e <dio_vidWriteChannel>
 284:	2f e7       	ldi	r18, 0x7F	; 127
 286:	84 e8       	ldi	r24, 0x84	; 132
 288:	9e e1       	ldi	r25, 0x1E	; 30
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <task+0x4a>
 292:	00 c0       	rjmp	.+0      	; 0x294 <task+0x54>
 294:	00 00       	nop
	_delay_ms(10000);
	dio_vidWriteChannel(DIO_PORTA,DIO_PIN1,STD_LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 af 00 	call	0x15e	; 0x15e <dio_vidWriteChannel>
 2a0:	08 95       	ret

000002a2 <main>:
}

int main(void)
{
	TIMER1_void_SetOVCallBack (task);
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 a3 01 	call	0x346	; 0x346 <TIMER1_void_SetOVCallBack>
    GIE_vidEnable();
 2aa:	0e 94 1c 01 	call	0x238	; 0x238 <GIE_vidEnable>
	TIMER1_void_Init();
 2ae:	0e 94 5f 01 	call	0x2be	; 0x2be <TIMER1_void_Init>
	TIMER1_void_SetTimerReg (65000);
 2b2:	88 ee       	ldi	r24, 0xE8	; 232
 2b4:	0e 94 9b 01 	call	0x336	; 0x336 <TIMER1_void_SetTimerReg>
	TIMER1_void_EnableOVInt();
 2b8:	0e 94 9f 01 	call	0x33e	; 0x33e <TIMER1_void_EnableOVInt>
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x1a>

000002be <TIMER1_void_Init>:

void (*TIMER1_ICU_CallBack) (void) ;

void TIMER1_void_SetICUCallBack(void (*Copy_ptr) (void) )
{
	TIMER1_ICU_CallBack = Copy_ptr ;
 2be:	8f b5       	in	r24, 0x2f	; 47
 2c0:	8e 7f       	andi	r24, 0xFE	; 254
 2c2:	8f bd       	out	0x2f, r24	; 47
 2c4:	8f b5       	in	r24, 0x2f	; 47
 2c6:	8d 7f       	andi	r24, 0xFD	; 253
 2c8:	8f bd       	out	0x2f, r24	; 47
 2ca:	8e b5       	in	r24, 0x2e	; 46
 2cc:	87 7f       	andi	r24, 0xF7	; 247
 2ce:	8e bd       	out	0x2e, r24	; 46
 2d0:	8e b5       	in	r24, 0x2e	; 46
 2d2:	8f 7e       	andi	r24, 0xEF	; 239
 2d4:	8e bd       	out	0x2e, r24	; 46
 2d6:	8f b5       	in	r24, 0x2f	; 47
 2d8:	8f 7b       	andi	r24, 0xBF	; 191
 2da:	8f bd       	out	0x2f, r24	; 47
 2dc:	8f b5       	in	r24, 0x2f	; 47
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	8f bd       	out	0x2f, r24	; 47
 2e2:	8e b5       	in	r24, 0x2e	; 46
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	8e bd       	out	0x2e, r24	; 46
 2e8:	8e b5       	in	r24, 0x2e	; 46
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	8e bd       	out	0x2e, r24	; 46
 2ee:	8e b5       	in	r24, 0x2e	; 46
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	8e bd       	out	0x2e, r24	; 46
 2f4:	89 b7       	in	r24, 0x39	; 57
 2f6:	8f 7d       	andi	r24, 0xDF	; 223
 2f8:	89 bf       	out	0x39, r24	; 57
 2fa:	89 b7       	in	r24, 0x39	; 57
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	89 bf       	out	0x39, r24	; 57
 300:	89 b7       	in	r24, 0x39	; 57
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	89 bf       	out	0x39, r24	; 57
 306:	89 b7       	in	r24, 0x39	; 57
 308:	8b 7f       	andi	r24, 0xFB	; 251
 30a:	89 bf       	out	0x39, r24	; 57
 30c:	88 b7       	in	r24, 0x38	; 56
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	88 bf       	out	0x38, r24	; 56
 312:	88 b7       	in	r24, 0x38	; 56
 314:	80 61       	ori	r24, 0x10	; 16
 316:	88 bf       	out	0x38, r24	; 56
 318:	88 b7       	in	r24, 0x38	; 56
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	88 bf       	out	0x38, r24	; 56
 31e:	88 b7       	in	r24, 0x38	; 56
 320:	84 60       	ori	r24, 0x04	; 4
 322:	88 bf       	out	0x38, r24	; 56
 324:	1d bc       	out	0x2d, r1	; 45
 326:	1c bc       	out	0x2c, r1	; 44
 328:	1b bc       	out	0x2b, r1	; 43
 32a:	1a bc       	out	0x2a, r1	; 42
 32c:	19 bc       	out	0x29, r1	; 41
 32e:	18 bc       	out	0x28, r1	; 40
 330:	17 bc       	out	0x27, r1	; 39
 332:	16 bc       	out	0x26, r1	; 38
 334:	08 95       	ret

00000336 <TIMER1_void_SetTimerReg>:
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	9d bd       	out	0x2d, r25	; 45
 33a:	8c bd       	out	0x2c, r24	; 44
 33c:	08 95       	ret

0000033e <TIMER1_void_EnableOVInt>:
 33e:	89 b7       	in	r24, 0x39	; 57
 340:	84 60       	ori	r24, 0x04	; 4
 342:	89 bf       	out	0x39, r24	; 57
 344:	08 95       	ret

00000346 <TIMER1_void_SetOVCallBack>:
 346:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 34a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 34e:	08 95       	ret

00000350 <__vector_9>:
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
 372:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 376:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 37a:	09 95       	icall
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_7>:
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
 3c0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER1_CTCA_CallBack>
 3c4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER1_CTCA_CallBack+0x1>
 3c8:	09 95       	icall
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_8>:
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
 40e:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER1_CTCB_CallBack>
 412:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER1_CTCB_CallBack+0x1>
 416:	09 95       	icall
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_6>:
}

void __vector_6(void) __attribute__((signal , used));
void __vector_6(void)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
	
	TIMER1_ICU_CallBack();
 45c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TIMER1_ICU_CallBack>
 460:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TIMER1_ICU_CallBack+0x1>
 464:	09 95       	icall
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
