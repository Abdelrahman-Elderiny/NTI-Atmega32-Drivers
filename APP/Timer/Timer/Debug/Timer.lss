
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000003d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e89  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083b  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000826  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078c  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ff  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00003817  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_1>
   8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_2>
   c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_10>
  2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 24 01 	call	0x248	; 0x248 <main>
  74:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	01 f1       	breq	.+64     	; 0xc0 <dio_vidConfigChannel+0x44>
  80:	30 f0       	brcs	.+12     	; 0x8e <dio_vidConfigChannel+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	d1 f1       	breq	.+116    	; 0xfa <dio_vidConfigChannel+0x7e>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <dio_vidConfigChannel+0x10>
  8a:	50 c0       	rjmp	.+160    	; 0x12c <dio_vidConfigChannel+0xb0>
  8c:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	59 f4       	brne	.+22     	; 0xa8 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <dio_vidConfigChannel+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <dio_vidConfigChannel+0x1e>
  a2:	82 2b       	or	r24, r18
  a4:	8a bb       	out	0x1a, r24	; 26
  a6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dio_vidConfigChannel+0x38>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dio_vidConfigChannel+0x34>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	69 f4       	brne	.+26     	; 0xde <dio_vidConfigChannel+0x62>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	20 81       	ld	r18, Z
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x58>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x54>
  d8:	82 2b       	or	r24, r18
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  de:	e0 e6       	ldi	r30, 0x60	; 96
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	20 81       	ld	r18, Z
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <dio_vidConfigChannel+0x72>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <dio_vidConfigChannel+0x6e>
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	59 f4       	brne	.+22     	; 0x114 <dio_vidConfigChannel+0x98>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  fe:	24 b3       	in	r18, 0x14	; 20
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <dio_vidConfigChannel+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <dio_vidConfigChannel+0x8a>
 10e:	82 2b       	or	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 114:	24 b3       	in	r18, 0x14	; 20
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <dio_vidConfigChannel+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <dio_vidConfigChannel+0xa0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	84 bb       	out	0x14, r24	; 20
 12a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	59 f4       	brne	.+22     	; 0x146 <dio_vidConfigChannel+0xca>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 130:	21 b3       	in	r18, 0x11	; 17
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <dio_vidConfigChannel+0xc0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <dio_vidConfigChannel+0xbc>
 140:	82 2b       	or	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <dio_vidConfigChannel+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <dio_vidConfigChannel+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <__vector_1>:
/***************************************************************/
/*                 Interrupt Vector Table                     */
/*************************************************************/
void __vector_1(void) __attribute__(( signal , used ));
void __vector_1(void)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	CallBackFunc();
 180:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <CallBackFunc>
 184:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <CallBackFunc+0x1>
 188:	09 95       	icall
	
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_2>:


void __vector_2(void) __attribute__(( signal , used ));
void __vector_2(void)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	Call_BackFunc();
 1ce:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Call_BackFunc>
 1d2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Call_BackFunc+0x1>
 1d6:	09 95       	icall
	
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_3>:


void __vector_3(void) __attribute__(( signal , used ));
void __vector_3(void)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	Call_Back_Func();
 21c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 224:	09 95       	icall
	
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <main>:

int main(void)
{
	/*TIMER0_void_SetCTCCallBack (TASK_1);
	GIE_vidEnable();*/
    TIMER0_void_Init ();
 248:	0e 94 3a 01 	call	0x274	; 0x274 <TIMER0_void_Init>
	//u8 x = 0 ;
	 dio_vidConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
  /*	TIMER0_void_EnableCTCInt ();*/
	
    while (1) 
    {
		for ( u8 i =0 ; i<255 ; i++ )
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	0a c0       	rjmp	.+20     	; 0x26e <main+0x26>
		{
			TIMER0_void_SetCompareVal (i );
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <TIMER0_void_SetCompareVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	9c e9       	ldi	r25, 0x9C	; 156
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x1c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x22>
 26a:	00 00       	nop
	 dio_vidConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);
  /*	TIMER0_void_EnableCTCInt ();*/
	
    while (1) 
    {
		for ( u8 i =0 ; i<255 ; i++ )
 26c:	cf 5f       	subi	r28, 0xFF	; 255
 26e:	cf 3f       	cpi	r28, 0xFF	; 255
 270:	a1 f7       	brne	.-24     	; 0x25a <main+0x12>
 272:	f1 cf       	rjmp	.-30     	; 0x256 <main+0xe>

00000274 <TIMER0_void_Init>:
	TIMER0_OV_CallBack = Copy_ptr ;
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 274:	83 b7       	in	r24, 0x33	; 51
 276:	80 64       	ori	r24, 0x40	; 64
 278:	83 bf       	out	0x33, r24	; 51
 27a:	83 b7       	in	r24, 0x33	; 51
 27c:	87 7f       	andi	r24, 0xF7	; 247
 27e:	83 bf       	out	0x33, r24	; 51
 280:	83 b7       	in	r24, 0x33	; 51
 282:	81 60       	ori	r24, 0x01	; 1
 284:	83 bf       	out	0x33, r24	; 51
 286:	83 b7       	in	r24, 0x33	; 51
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	83 bf       	out	0x33, r24	; 51
 28c:	83 b7       	in	r24, 0x33	; 51
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	83 bf       	out	0x33, r24	; 51
 292:	83 b7       	in	r24, 0x33	; 51
 294:	8f 7e       	andi	r24, 0xEF	; 239
 296:	83 bf       	out	0x33, r24	; 51
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	80 62       	ori	r24, 0x20	; 32
 29c:	83 bf       	out	0x33, r24	; 51
 29e:	89 b7       	in	r24, 0x39	; 57
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	89 bf       	out	0x39, r24	; 57
 2a4:	89 b7       	in	r24, 0x39	; 57
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	89 bf       	out	0x39, r24	; 57
 2aa:	88 b7       	in	r24, 0x38	; 56
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	88 bf       	out	0x38, r24	; 56
 2b0:	88 b7       	in	r24, 0x38	; 56
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	88 bf       	out	0x38, r24	; 56
 2b6:	12 be       	out	0x32, r1	; 50
 2b8:	1c be       	out	0x3c, r1	; 60
 2ba:	08 95       	ret

000002bc <TIMER0_void_SetCompareVal>:
 2bc:	8c bf       	out	0x3c, r24	; 60
 2be:	08 95       	ret

000002c0 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 2e2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TIMER0_OV_CallBack>
 2e6:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TIMER0_OV_CallBack+0x1>
 2ea:	09 95       	icall
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 330:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER0_CTC_CallBack>
 334:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER0_CTC_CallBack+0x1>
 338:	09 95       	icall
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
